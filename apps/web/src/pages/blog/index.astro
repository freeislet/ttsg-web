---
import { getCollection } from 'astro:content'
import Layout from '@/layouts/Layout.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import BlogList from '@/components/blog/BlogList.astro'
import type { Category } from '@/types/blog'
import { categoryNames } from '@/types/blog'

// 모든 블로그 포스트 가져오기
const allPosts = await getCollection('blog')

// 발행된 포스트만 필터링
const publishedPosts = allPosts.filter((post) => !post.data.draft)

// 추천 포스트 필터링
const featuredPosts = publishedPosts.filter((post) => post.data.featured)

// 카테고리별 포스트 수 계산
const categoryStats = publishedPosts.reduce(
  (acc, post) => {
    const category = post.data.category as Category
    acc[category] = (acc[category] || 0) + 1
    return acc
  },
  {} as Record<Category, number>
)
---

<Layout
  title="블로그 | TTSG"
  description="TTSG의 기술 블로그입니다. 개발 관련 정보와 최신 소식을 확인하세요."
>
  <Header />

  <main class="min-h-screen bg-gray-50">
    <!-- 블로그 헤더 -->
    <section class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 py-12">
        <div class="text-center">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">TTSG 블로그</h1>
          <p class="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            개발 기술, 업계 동향, 그리고 TTSG의 이야기를 전해드립니다.
          </p>

          <!-- 카테고리 네비게이션 -->
          <div class="flex flex-wrap justify-center gap-4">
            <a
              href="/blog"
              class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200"
            >
              전체 ({publishedPosts.length})
            </a>
            {
              Object.entries(categoryStats).map(([category, count]) => (
                <a
                  href={`/blog/category/${category}`}
                  class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors duration-200"
                >
                  {categoryNames[category as Category]} ({count})
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </section>

    <div class="max-w-7xl mx-auto px-4 py-8">
      <!-- 추천 포스트 섹션 -->
      {
        featuredPosts.length > 0 && (
          <section class="mb-12">
            <BlogList posts={featuredPosts} title="추천 포스트" showFeatured={true} />
          </section>
        )
      }

      <!-- 최신 포스트 섹션 -->
      <section>
        <BlogList posts={publishedPosts} title="최신 포스트" />
      </section>

      <!-- 카테고리별 미리보기 -->
      {
        (Object.keys(categoryStats) as Category[]).map((category) => {
          const categoryPosts = publishedPosts.filter((post) => post.data.category === category)
          return (
            categoryPosts.length > 0 && (
              <section class="mt-16">
                <div class="flex items-center justify-between mb-6">
                  <h2 class="text-2xl font-bold text-gray-900">{categoryNames[category]} 포스트</h2>
                  <a
                    href={`/blog/category/${category}`}
                    class="text-blue-600 hover:text-blue-800 font-medium text-sm"
                  >
                    전체 보기 →
                  </a>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {categoryPosts.slice(0, 3).map((post) => (
                    <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden">
                      <div class="p-6">
                        <div class="flex items-center justify-between mb-3">
                          <span
                            class={`inline-block px-2 py-1 text-xs font-medium rounded-full
                        ${category === 'tech' ? 'bg-blue-100 text-blue-800' : ''}
                        ${category === 'news' ? 'bg-green-100 text-green-800' : ''}
                        ${category === 'intro' ? 'bg-purple-100 text-purple-800' : ''}
                      `}
                          >
                            {categoryNames[category as Category]}
                          </span>
                          <time class="text-sm text-gray-500">
                            {post.data.pubDate.toLocaleDateString('ko-KR')}
                          </time>
                        </div>

                        <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
                          <a
                            href={`/blog/${post.slug}`}
                            class="hover:text-blue-600 transition-colors duration-200"
                          >
                            {post.data.title}
                          </a>
                        </h3>

                        <p class="text-gray-600 text-sm line-clamp-2 mb-3">
                          {post.data.description}
                        </p>

                        <div class="flex flex-wrap gap-1">
                          {post.data.tags.slice(0, 2).map((tag) => (
                            <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded">
                              #{tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </section>
            )
          )
        })
      }
    </div>
  </main>

  <Footer />
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
