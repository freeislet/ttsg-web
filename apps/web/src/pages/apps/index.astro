---
import Layout from '@/layouts/Layout.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import { getActiveApps } from '@/data/apps'
import { pageSEO } from '@/lib/seo/config'

// 활성 상태의 앱들만 가져오기
const activeApps = getActiveApps()

// SEO 설정
const seo = {
  ...pageSEO.apps,
  url: '/apps',
  type: 'website' as const,
}
---

<Layout seo={seo}>
  <Header />
  <main class="min-h-screen bg-gray-50">
    <!-- 헤더 섹션 -->
    <section class="bg-white border-b">
      <div class="max-w-6xl mx-auto px-4 py-16">
        <div class="text-center">
          <h1 class="text-4xl font-bold text-gray-900 mb-4">Demo Apps</h1>
          <p class="text-xl text-gray-600 max-w-2xl mx-auto">
            TTSG에서 개발한 다양한 데모 애플리케이션들을 확인해보세요.
          </p>
        </div>
      </div>
    </section>

    <!-- 앱 목록 섹션 -->
    <section class="py-16">
      <div class="max-w-6xl mx-auto px-4">
        <div class="grid gap-12">
          {activeApps.map((app) => (
            <div class="bg-white rounded-xl shadow-lg overflow-hidden">
              <div class="flex flex-col lg:flex-row">
                <!-- 스크린샷 영역 -->
                <div class="lg:w-2/3">
                  {app.screenshots.length > 0 ? (
                    <div class="aspect-video relative overflow-hidden">
                      <img
                        src={app.screenshots[0]}
                        alt={`${app.name} 스크린샷`}
                        class="w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform duration-300"
                        onclick={`openImageModal('${app.screenshots[0]}', '${app.name} 스크린샷')`}
                      />
                      {app.screenshots.length > 1 && (
                        <div class="absolute bottom-4 right-4 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm">
                          +{app.screenshots.length - 1} more
                        </div>
                      )}
                    </div>
                  ) : (
                    <div class="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                      <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                      </svg>
                    </div>
                  )}
                </div>

                <!-- 앱 정보 영역 -->
                <div class="lg:w-1/3 p-8 flex flex-col">
                  <div class="flex items-center mb-4">
                    {app.icon && (
                      <svg class="w-8 h-8 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                      </svg>
                    )}
                    <div>
                      <h3 class="text-2xl font-bold text-gray-900">{app.name}</h3>
                      <div class="flex items-center mt-1">
                        <span class={`inline-block w-2 h-2 rounded-full mr-2 ${
                          app.status === 'active' ? 'bg-green-500' :
                          app.status === 'maintenance' ? 'bg-yellow-500' : 'bg-gray-500'
                        }`}></span>
                        <span class="text-sm text-gray-600 capitalize">
                          {app.status === 'active' ? '운영 중' :
                           app.status === 'maintenance' ? '점검 중' : '준비 중'}
                        </span>
                      </div>
                    </div>
                  </div>

                  <p class="text-gray-600 mb-6 flex-1">{app.description}</p>

                  <!-- 기술 스택 태그 -->
                  <div class="flex flex-wrap gap-2 mb-6">
                    {app.tags.map((tag) => (
                      <span class={`inline-block px-3 py-1 text-xs font-medium rounded-full ${tag.color}`}>
                        {tag.name}
                      </span>
                    ))}
                  </div>

                  <!-- 액션 버튼 -->
                  <div class="flex gap-3">
                    <a
                      href={app.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class={`flex-1 inline-flex items-center justify-center px-6 py-3 rounded-lg font-medium transition-colors duration-200 ${
                        app.status === 'active'
                          ? 'bg-blue-600 text-white hover:bg-blue-700'
                          : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      }`}
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                      </svg>
                      {app.status === 'active' ? '앱 실행' :
                       app.status === 'maintenance' ? '점검 중' : '준비 중'}
                    </a>
                    
                    {app.screenshots.length > 1 && (
                      <button
                        onclick={`showAllScreenshots('${app.id}')`}
                        class="px-4 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                        title="모든 스크린샷 보기"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
  <Footer />

  <!-- 이미지 확대 모달 -->
  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden items-center justify-center p-4">
    <div class="relative max-w-4xl max-h-full">
      <button 
        onclick="closeImageModal()"
        class="absolute -top-10 right-0 text-white hover:text-gray-300 text-2xl font-bold"
        aria-label="닫기"
      >
        ✕
      </button>
      <img 
        id="modalImage" 
        src="" 
        alt="" 
        class="max-w-full max-h-full object-contain rounded-lg"
      />
    </div>
  </div>

  <script>
    // 앱 데이터를 전역으로 사용할 수 있도록 설정
    const appsData = {
      'ai-chat': {
        screenshots: ['/assets/images/apps/ai-chat/image.png']
      }
    };

    function openImageModal(src: string, alt: string) {
      const modal = document.getElementById('imageModal');
      const modalImage = document.getElementById('modalImage') as HTMLImageElement;
      
      if (modal && modalImage) {
        modalImage.src = src;
        modalImage.alt = alt;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        // ESC 키로 모달 닫기
        document.addEventListener('keydown', handleEscKey);
      }
    }
    
    function closeImageModal() {
      const modal = document.getElementById('imageModal');
      
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        
        // 이벤트 리스너 제거
        document.removeEventListener('keydown', handleEscKey);
      }
    }
    
    function handleEscKey(event: KeyboardEvent) {
      if (event.key === 'Escape') {
        closeImageModal();
      }
    }

    function showAllScreenshots(appId: string) {
      const app = appsData[appId as keyof typeof appsData];
      if (app && app.screenshots.length > 0) {
        // 첫 번째 스크린샷을 모달로 표시
        openImageModal(app.screenshots[0], `${appId} 스크린샷`);
      }
    }
    
    // 모달 배경 클릭 시 닫기
    document.addEventListener('DOMContentLoaded', () => {
      const modal = document.getElementById('imageModal');
      if (modal) {
        modal.addEventListener('click', (event) => {
          if (event.target === modal) {
            closeImageModal();
          }
        });
      }
    });
  </script>
</Layout>
