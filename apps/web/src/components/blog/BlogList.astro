---
import BlogCard from './BlogCard.astro'
import type { CollectionEntry } from 'astro:content'
import type { Category } from '@/types/blog'
import { categoryData } from '@/types/blog'

export interface Props {
  posts: CollectionEntry<'blog'>[]
  title?: string
  category?: Category
  featured?: boolean
  maxPosts?: number
  compact?: boolean
  showViewAll?: boolean
}

const {
  posts,
  title,
  category,
  featured = false,
  maxPosts,
  compact = false,
  showViewAll = false,
} = Astro.props

// 포스트 필터링 및 정렬
let filteredPosts = posts //.filter((post) => !post.data.draft)

if (category) {
  filteredPosts = filteredPosts.filter((post) => post.data.category === category)
}

if (featured) {
  filteredPosts = filteredPosts.filter((post) => post.data.featured)
}

// 발행일 기준 내림차순 정렬
// filteredPosts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())

// maxPosts가 설정된 경우 제한
if (maxPosts) {
  filteredPosts = filteredPosts.slice(0, maxPosts)
}
---

<section class={compact ? '' : 'py-8'}>
  <!-- 섹션 헤더 -->
  {
    (title || category) && (
      <div class={compact ? 'flex items-center justify-between mb-6' : 'mb-8'}>
        <h2
          class={
            compact
              ? 'text-2xl font-bold text-gray-900'
              : 'text-2xl md:text-3xl font-bold text-gray-900 mb-2'
          }
        >
          {title || (category && categoryData[category].detailedName) || '블로그 포스트'}
        </h2>
        {showViewAll && category && (
          <a
            href={`/blog/category/${category}`}
            class="text-blue-600 hover:text-blue-800 font-medium text-sm"
          >
            전체 보기 →
          </a>
        )}
        {!compact && category && <p class="text-gray-600">{categoryData[category].description}</p>}
      </div>
    )
  }

  <!-- 포스트 목록 -->
  {
    filteredPosts.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredPosts.map((post) => (
          <BlogCard
            title={post.data.title}
            description={post.data.description}
            pubDate={post.data.pubDate}
            category={post.data.category}
            tags={post.data.tags}
            slug={post.slug}
            heroImage={post.data.heroImage}
            featured={post.data.featured}
            compact={compact}
          />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <svg
          class="w-16 h-16 text-gray-300 mx-auto mb-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          />
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          {category
            ? `${categoryData[category].detailedName} 포스트가 없습니다`
            : '포스트가 없습니다'}
        </h3>
        <p class="text-gray-500">
          {category
            ? `${categoryData[category].detailedName} 카테고리의 새로운 포스트를 기다려주세요.`
            : '새로운 포스트를 기다려주세요.'}
        </p>
      </div>
    )
  }
</section>
